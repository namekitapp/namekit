name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: namekit
            asset_name: namekit-linux-amd64
            build_args: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: namekit
            asset_name: namekit-linux-arm64
            build_args: "--features vendored-openssl"
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: namekit
            asset_name: namekit-macos-amd64
            build_args: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: namekit
            asset_name: namekit-macos-arm64
            build_args: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: namekit.exe
            asset_name: namekit-windows-amd64
            build_args: ""

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} ${{ matrix.build_args }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
            chmod +x release/${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: release/${{ matrix.asset_name }}
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Namekit ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            release/namekit-linux-amd64/namekit-linux-amd64
            release/namekit-linux-arm64/namekit-linux-arm64
            release/namekit-macos-amd64/namekit-macos-amd64
            release/namekit-macos-arm64/namekit-macos-arm64
            release/namekit-windows-amd64/namekit-windows-amd64
